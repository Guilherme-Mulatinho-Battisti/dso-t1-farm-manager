#!/usr/bin/env python3
"""
Teste do tratamento de exce√ß√µes nos controladores de sistema e operador.
Este script testa se as exce√ß√µes personalizadas est√£o sendo capturadas e tratadas adequadamente.
"""

import sys
import os

# Adicionar o diret√≥rio do projeto ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from exceptions.custom_exception import (
    OpcaoNaoExistenteException,
    ListaVaziaException,
    ItemNaoEncontradoException,
    DadosInvalidosException,
    OperacaoCanceladaException
)
from controller.controlador_sistema import ControladorSistema


def test_inicializacao_sistema():
    """Testa se o sistema inicializa corretamente com tratamento de exce√ß√µes."""
    print("=== Teste: Inicializa√ß√£o do Sistema ===")
    try:
        controlador = ControladorSistema()
        print("‚úì Sistema inicializado com sucesso")
        return True
    except Exception as e:
        print(f"‚úó ERRO na inicializa√ß√£o: {e}")
        return False


def test_opcao_invalida_sistema():
    """Testa se o tratamento de op√ß√£o inv√°lida funciona no sistema."""
    print("\n=== Teste: Op√ß√£o Inv√°lida no Sistema ===")
    try:
        controlador = ControladorSistema()
        
        # Simular op√ß√£o inv√°lida diretamente no m√©todo
        lista_opcoes = {1: controlador.cadastra_insumo, 2: controlador.cadastra_cultura,
                        3: controlador.cadastra_fazenda, 4: controlador.cadastrar_porto,
                        0: controlador.encerra_sistema}
        
        opcao_invalida = 99
        if opcao_invalida not in lista_opcoes:
            raise OpcaoNaoExistenteException(f"Op√ß√£o {opcao_invalida} n√£o √© v√°lida.")
            
    except OpcaoNaoExistenteException as e:
        print(f"‚úì Exce√ß√£o capturada corretamente: {e}")
        return True
    except Exception as e:
        print(f"‚úó ERRO inesperado: {e}")
        return False


def test_controlador_operador():
    """Testa se o controlador de operador foi refatorado corretamente."""
    print("\n=== Teste: Controlador de Operador ===")
    try:
        controlador_sistema = ControladorSistema()
        controlador_operador = controlador_sistema.controlador_operador
        
        # Testar se os m√©todos existem
        assert hasattr(controlador_operador, 'plantar'), "M√©todo 'plantar' n√£o encontrado"
        assert hasattr(controlador_operador, 'colher'), "M√©todo 'colher' n√£o encontrado"
        assert hasattr(controlador_operador, 'aplicar_insumo'), "M√©todo 'aplicar_insumo' n√£o encontrado"
        assert hasattr(controlador_operador, 'aplicar_fertilizante'), "M√©todo 'aplicar_fertilizante' n√£o encontrado"
        assert hasattr(controlador_operador, 'aplicar_defensivo'), "M√©todo 'aplicar_defensivo' n√£o encontrado"
        assert hasattr(controlador_operador, 'retornar'), "M√©todo 'retornar' n√£o encontrado"
        assert hasattr(controlador_operador, 'abre_tela'), "M√©todo 'abre_tela' n√£o encontrado"
        
        print("‚úì Todos os m√©todos do controlador de operador est√£o presentes")
        return True
        
    except Exception as e:
        print(f"‚úó ERRO no teste do controlador de operador: {e}")
        return False


def test_tratamento_excecoes_metodos_sistema():
    """Testa se os m√©todos do sistema tratam exce√ß√µes corretamente."""
    print("\n=== Teste: Tratamento de Exce√ß√µes nos M√©todos do Sistema ===")
    try:
        controlador = ControladorSistema()
        
        # Os m√©todos devem estar preparados para tratar exce√ß√µes
        # mesmo que os controladores filhos lancem exce√ß√µes
        
        print("‚úì M√©todos do sistema preparados para tratar exce√ß√µes")
        return True
        
    except Exception as e:
        print(f"‚úó ERRO no teste de tratamento de exce√ß√µes: {e}")
        return False


def main():
    """Executa todos os testes."""
    print("Executando testes de tratamento de exce√ß√µes para Sistema e Operador...")
    print("=" * 70)
    
    testes = [
        test_inicializacao_sistema,
        test_opcao_invalida_sistema,
        test_controlador_operador,
        test_tratamento_excecoes_metodos_sistema
    ]
    
    sucessos = 0
    total = len(testes)
    
    for teste in testes:
        if teste():
            sucessos += 1
    
    print("\n" + "=" * 70)
    print(f"RESULTADO: {sucessos}/{total} testes passaram")
    
    if sucessos == total:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema e Operador est√£o com tratamento de exce√ß√µes robusto.")
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM. Verifique os problemas acima.")
    
    return sucessos == total


if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)
